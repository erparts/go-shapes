//kage:unit pixels
package main

// see jfm_pass.kage for further context on JFA and offsets decoding

func Fragment(_ vec4, sourceCoords0 vec2, color vec4, customVAs vec4) vec4 {
	thickness := customVAs[0]
	aaMargin := customVAs[1]

	normCoords0 := (sourceCoords0 - imageSrc0Origin()) / imageSrc0Size()
	sourceCoords1 := (normCoords0 * imageSrc1Size()) + imageSrc0Origin()

	seedOffset := vec2(jfaComputeOffsetToSeed(imageSrc1At(sourceCoords1)))
	seedDist := length(seedOffset)

	alphaFactor := 1.0 - smoothstep(max(thickness-aaMargin, 0), thickness, seedDist)
	return color * alphaFactor
}

// taken from jfm_pass.kage
func jfaComputeOffsetToSeed(pix vec4) ivec2 {
	return ivec2(jfaDecodeAxisOffsetToSeed(pix.xy), jfaDecodeAxisOffsetToSeed(pix.zw))
}

// taken from jfm_pass.kage
func jfaDecodeAxisOffsetToSeed(pq vec2) int {
	const epsilon = 0.001
	hi := int((pq[0] + epsilon) * 255.0)
	lo := int((pq[1] + epsilon) * 255.0)
	magnitude := ((hi & 0x7F) << 8) | lo
	sign := 1 - ((hi >> 7) << 1)
	return sign * magnitude
}
