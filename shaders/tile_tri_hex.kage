//kage:unit pixels
package main

const Sqrt3 = 1.73205080757

func Fragment(targetCoords vec4, sourceCoords vec2, color vec4, customVAs vec4) vec4 {
	const AAMargin = 1.333
	const EqTriBaseToHeight = 0.86602540378 // sqrt(3)/2

	offset := customVAs.xy
	outTriBase, inTriBase := customVAs.z, customVAs.w
	outTriSize := vec2(outTriBase, outTriBase*EqTriBaseToHeight)
	relCoords := targetCoords.xy - imageDstOrigin() - offset
	cellSize := vec2(outTriSize.x*0.5, outTriSize.y)
	cell := floor(relCoords / cellSize)
	triCenter := cell * cellSize // adjusted later
	posInCell := relCoords - triCenter

	var flip bool
	if mod(cell.x, 2.0) == mod(cell.y, 2.0) { // cell of type /
		if (cellSize.x-posInCell.x)*Sqrt3 < posInCell.y { // left side of up triangle /|
			triCenter.x += cellSize.x
			triCenter.y += cellSize.y * (2.0 / 3.0)
		} else { // right side of down triangle |/
			triCenter.y += cellSize.y * (1.0 / 3.0)
			flip = true
		}
	} else { // cell of type \
		if posInCell.x*Sqrt3 < posInCell.y { // right side of up triangle |\
			triCenter.y += cellSize.y * (2.0 / 3.0)
		} else { // left side of down triangle \|
			triCenter.x += cellSize.x
			triCenter.y += cellSize.y * (1.0 / 3.0)
			flip = true
		}
	}

	p := relCoords - triCenter
	if flip {
		p = -p
	}
	dist := distanceToEqTriangle(p, inTriBase)
	alpha := 1.0 - smoothstep(-AAMargin, 0, dist)
	alpha = pow(alpha, 1.0/2.2)
	return color * alpha
}

func distanceToEqTriangle(p vec2, sideLen float) float {
	hs := sideLen / 2.0
	p.x = abs(p.x) - hs
	p.y = -p.y + hs/Sqrt3
	if p.x+Sqrt3*p.y > 0.0 {
		p = vec2(p.x-Sqrt3*p.y, -Sqrt3*p.x-p.y) / 2.0
	}
	p.x -= clamp(p.x, -2.0*hs, 0.0)
	return -length(p) * sign(p.y)
}
