//kage:unit pixels
package main

var RGB vec3
var KernelLen int
var Kernel [9]float // 1D kernel, center and one side, since gaussian kernels are symmetrical

func Fragment(targetCoords vec4, sourceCoords vec2, color vec4, customVAs vec4) vec4 {
	srcCoords := floor(sourceCoords) + vec2(0.5)
	loThresh, hiThresh := customVAs[0], customVAs[1]
	clrMix := customVAs[2]

	accColor := multBySim(imageSrc0At(srcCoords), RGB, loThresh, hiThresh) * Kernel[0]
	for offset := 1; offset < 9; offset += 1 {
		if offset >= KernelLen {
			break
		}
		left := vec2(srcCoords.x-float(offset), srcCoords.y)
		right := vec2(srcCoords.x+float(offset), srcCoords.y)
		clrLeft, clrRight := imageSrc0At(left), imageSrc0At(right)
		accColor += multBySim(clrLeft, RGB, loThresh, hiThresh) * Kernel[offset]
		accColor += multBySim(clrRight, RGB, loThresh, hiThresh) * Kernel[offset]
	}

	return mix(color*accColor.a, accColor, clrMix)
}

func multBySim(clr vec4, rgb vec3, loThresh, hiThresh float) vec4 {
	// note: quadratic approximations don't hold up well with loThresh close to zero
	// diff := clr.rgb - rgb
	// sqDist := dot(diff, diff)
	// similarity := 1.0 - (sqDist / 3.0)
	similarity := 1.0 - (distance(clr.rgb, rgb) / 1.73205)
	return clr * smoothstep(loThresh, hiThresh, similarity)
}

func linearStep(a, b, x float) float {
	x = clamp(x, a, b)
	return (x - a) / (b - a)
}
