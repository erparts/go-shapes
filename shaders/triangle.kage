//kage:unit pixels
package main

var P0 vec2
var P1 vec2
var P2 vec2
var Rounding float

func Fragment(targetCoords vec4, _ vec2, color vec4) vec4 {
	dist := distanceToTriangle(targetCoords.xy-imageDstOrigin(), P0, P1, P2)
	alpha := 1.0 - smoothstep(-1.333, 0, dist-Rounding)
	alpha = pow(alpha, 1.0/2.2)
	return color * alpha
}

func distanceToTriangle(p, p0, p1, p2 vec2) float {
	e0, e1, e2 := p1-p0, p2-p1, p0-p2
	v0, v1, v2 := p-p0, p-p1, p-p2
	pq0 := v0 - e0*clamp(dot(v0, e0)/dot(e0, e0), 0.0, 1.0)
	pq1 := v1 - e1*clamp(dot(v1, e1)/dot(e1, e1), 0.0, 1.0)
	pq2 := v2 - e2*clamp(dot(v2, e2)/dot(e2, e2), 0.0, 1.0)
	s := sign(e0.x*e2.y - e0.y*e2.x)
	d := min(
		min(
			vec2(dot(pq0, pq0), s*(v0.x*e0.y-v0.y*e0.x)),
			vec2(dot(pq1, pq1), s*(v1.x*e1.y-v1.y*e1.x)),
		),
		vec2(dot(pq2, pq2), s*(v2.x*e2.y-v2.y*e2.x)),
	)
	return -sqrt(d.x) * sign(d.y)
}
