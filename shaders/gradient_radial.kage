//kage:unit pixels
package main

var Origin vec2       // cx, cy
var Radius vec3       // fromRadius, transRadius, toRadius
var CurveFactor float // 0.5 for early start, 2.0 for late start, etc.
var NumSteps int      // <=1 for continuous

func Fragment(targetCoords vec4, sourceCoords vec2, color vec4, customVAs vec4) vec4 {
	const Edge = 1.333

	relCoords := targetCoords.xy - imageDstOrigin()
	dist := distance(relCoords, Origin)
	progress := (dist - Radius[0]) / (Radius[1] - Radius[0])
	if NumSteps > 1 {
		// apply step anti-aliasing
		const AntiAliasBand = 0.05
		step := progress * float(NumSteps)
		stepFloor := floor(step)
		normStepStart := stepFloor / float(NumSteps-1)
		normStepEnd := (stepFloor + 1.0) / float(NumSteps-1)
		t := smoothstep(1.0-AntiAliasBand, 1.0, step-stepFloor) // TODO: this is not centered
		progress = mix(normStepStart, normStepEnd, t)
	}
	progress = pow(progress, CurveFactor)

	from, to := customVAs, color
	oklab := mix(from, to, clamp(progress, 0, 1))
	alpha := 1.0 - smoothstep(Radius[2]-Edge, Radius[2], dist)
	return vec4(OklabToRGB(oklab.xyz), oklab.a) * alpha
}

func OklabToRGB(lab vec3) vec3 {
	linRGB := OklabToLinRGB(lab)
	return vec3(unlinearize(linRGB.r), unlinearize(linRGB.g), unlinearize(linRGB.b))
}

func OklabToLinRGB(lab vec3) vec3 {
	x := pow(lab[0]+0.3963377774*lab[1]+0.2158037573*lab[2], 3)
	y := pow(lab[0]-0.1055613458*lab[1]-0.0638541728*lab[2], 3)
	z := pow(lab[0]-0.0894841775*lab[1]-1.2914855480*lab[2], 3)

	return vec3(
		clamp(+4.0767416621*x-3.3077115913*y+0.2309699292*z, 0, 1),
		clamp(-1.2684380046*x+2.6097574011*y-0.3413193965*z, 0, 1),
		clamp(-0.0041960863*x-0.7034186147*y+1.7076147010*z, 0, 1),
	)
}

func unlinearize(colorChan float) float {
	if colorChan >= 0.0031308 {
		return 1.055*pow(colorChan, 1.0/2.4) - 0.055
	} else {
		return colorChan * 12.92
	}
}
