//kage:unit pixels
package main

// sin(t), cos(t), where t is half the angle of the aperture.
// t = 0 is right, t = pi/2 is down and so on
var WedgeNormal vec2
var Rounding float

func Fragment(targetCoords vec4, _ vec2, color vec4, customVAs vec4) vec4 {
	const AAMargin = 1.333

	center := customVAs.xy
	centerDir := customVAs.z
	radius := customVAs.w

	relCoords := targetCoords.xy - imageDstOrigin()
	relCenterCoords := relCoords - center

	dist := sdfPie(rotate(relCenterCoords, -centerDir), WedgeNormal, radius-Rounding) - Rounding

	alpha := 1.0 - smoothstep(-AAMargin, 0.0, dist)
	return color * pow(alpha, 1.0/2.2)
}

func sdfPie(pos vec2, wedgeNormal vec2, radius float) float {
	pos = pos.yx // switch symmetry axis from original function
	pos.x = abs(pos.x)
	l := length(pos) - radius
	m := length(pos - wedgeNormal*clamp(dot(pos, wedgeNormal), 0.0, radius))
	return max(l, m*sign(wedgeNormal.y*pos.x-wedgeNormal.x*pos.y))
}

func rotate(p vec2, rads float) vec2 {
	cosR, sinR := cos(rads), sin(rads)
	return vec2(p.x*cosR-p.y*sinR, p.x*sinR+p.y*cosR)
}
