//kage:unit pixels
package main

func Fragment(targetCoords vec4, sourceCoords vec2, color vec4, customVAs vec4) vec4 {
	const Multiply = true // if false, subtractive blending is assumed
	const MaxRadius = 32.0
	const Edge = 1.333
	const SafetyMargin = 0.0

	radius := customVAs[0]
	startThreshold := customVAs[1]
	endThreshold := customVAs[2]

	srcCoords := floor(sourceCoords) + vec2(0.5)
	sigma := radius / 3.0
	sigma2 := 2.0 * sigma * sigma
	halfRadius := radius / 2.0
	accColor := vec4(0.0)
	accWeight := 0.0

	for x := -SafetyMargin; x < MaxRadius; x += 1.0 {
		if x > radius+SafetyMargin {
			break
		}
		sample := floor(vec2(srcCoords.x-halfRadius+x, srcCoords.y)) + vec2(0.5)
		clr := imageSrc0At(sample)
		dist := abs(srcCoords.x - sample.x)
		if dist <= halfRadius+Edge {
			luminance := dot(clr.rgb, vec3(0.299, 0.587, 0.114))
			darkFactor := smoothstep(-startThreshold, -endThreshold, -luminance)
			dist2 := dist * dist
			factor := exp(-dist2 / sigma2)
			accColor += clr * factor * darkFactor
			accWeight += factor
		}
	}

	if Multiply {
		accColor /= accWeight
		return mix(color*accColor.a, accColor*color.a, customVAs[3])
	} else { // assume Subtract
		accColor /= accWeight
		accColor = vec4(vec3(accColor.a)-accColor.rgb, accColor.a)
		negColor := vec4(vec3(color.a)-color.rgb, color.a)
		return mix(negColor*accColor.a, accColor*color.a, customVAs[3])
	}
}
