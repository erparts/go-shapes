//kage:unit pixels
package main

// NOTE: this shader uses an ease out quad curve for the effect, which
// is notably more performant than the typical sin/atan, but it only
// works well for non-extreme warp ratios.
func Fragment(_ vec4, sourceCoords vec2, _ vec4, customVAs vec4) vec4 {
	warp := customVAs.xy // horz and vertical warp factors

	normSourceCoords := (sourceCoords - imageSrc0Origin()) / imageSrc0Size()
	origSourceCoords := (normSourceCoords - vec2(0.5))

	sidePresence := easeOutQuad(vec2(1.0) - abs(origSourceCoords.yx*2.0))
	origSourceCoords *= vec2(1.0) + sidePresence*warp
	normSourceCoords = origSourceCoords + vec2(0.5)

	finalCoords := normSourceCoords*imageSrc0Size() + imageSrc0Origin()
	return bilinearSampling(finalCoords, vec2(1.0))
}

func easeOutQuad(v vec2) vec2 {
	omv := vec2(1.0) - v
	return vec2(1.0) - omv*omv
}

func bilinearSampling(coords, unit vec2) vec4 {
	tl := imageSrc0At(coords - unit/2.0)
	tr := imageSrc0At(coords + vec2(+unit.x/2.0, -unit.y/2.0))
	bl := imageSrc0At(coords + vec2(-unit.x/2.0, +unit.y/2.0))
	br := imageSrc0At(coords + unit/2.0)
	delta := min(fract(coords+unit/2.0), unit) / unit
	top := mix(tl, tr, delta.x)
	bottom := mix(bl, br, delta.x)
	return mix(top, bottom, delta.y)
}
