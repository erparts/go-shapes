//kage:unit pixels
package main

func Fragment(targetCoords vec4, sourceCoords vec2, color vec4, customVAs vec4) vec4 {
	const MaxThickness = 32.0
	const Edge = 1.333
	const SafetyMargin = 1.0 // *
	// * in theory, this should be >= Edge. In practice, 1 works well and it's cheap

	// We loop through the pixels surrounding our current fragment, up to
	// the requested thickness. For each pixel we come across, we get its
	// alpha and the distance *between our src coords, which are centered
	// at (.5, .5), and the center of the sampled pixel*. Using this distance,
	// we normalize the alpha that the sample could contribute to our current
	// position.
	thickness := customVAs[0]
	halfThick := thickness / 2.0
	alpha := 0.0
	scanOffset := vec2(halfThick)
	for y := -SafetyMargin; y < MaxThickness+SafetyMargin; y += 1.0 {
		if y > thickness+SafetyMargin {
			break
		}
		for x := -SafetyMargin; x < MaxThickness+SafetyMargin; x += 1.0 {
			if x > thickness+SafetyMargin {
				break
			}
			offset := vec2(x, y) - scanOffset
			sample := floor(sourceCoords+offset) + vec2(0.5)
			clr := imageSrc0At(sample)
			dist := distance(sourceCoords, sample)
			if dist <= halfThick {
				alpha = max(alpha, clr.a)
			} else if dist <= halfThick+Edge {
				factor := 1.0 - smoothstep(halfThick, halfThick+Edge, dist)
				alpha = max(alpha, clr.a*factor)
			}
		}
	}

	return color * alpha
}
