//kage:unit pixels
package main

// see jfm_pass.kage for further context on JFA and offsets decoding

func Fragment(_ vec4, sourceCoords vec2, _ vec4, customVAs vec4) vec4 {
	encodedOffset := imageSrc0At(sourceCoords)
	seedOffset := jfaComputeOffsetToSeed(encodedOffset)
	seedDist := length(vec2(seedOffset))
	maxDist := customVAs[0]
	r := max(maxDist-seedDist, 0) / maxDist
	return heatmap(1.0 - r)
}

func heatmap(t float) vec4 {
	r := clamp(1.5-abs(4.0*t-3.0), 0.0, 1.0)
	g := clamp(1.5-abs(4.0*t-2.0), 0.0, 1.0)
	b := clamp(1.5-abs(4.0*t-1.0), 0.0, 1.0)
	return vec4(r, g, b, 1)
}

// taken from jfm_pass.kage
func jfaComputeOffsetToSeed(pix vec4) ivec2 {
	return ivec2(jfaDecodeAxisOffsetToSeed(pix.xy), jfaDecodeAxisOffsetToSeed(pix.zw))
}

// taken from jfm_pass.kage
func jfaDecodeAxisOffsetToSeed(pq vec2) int {
	const epsilon = 0.001
	hi := int((pq[0] + epsilon) * 255.0)
	lo := int((pq[1] + epsilon) * 255.0)
	magnitude := ((hi & 0x7F) << 8) | lo
	sign := 1 - ((hi >> 7) << 1)
	return sign * magnitude
}
